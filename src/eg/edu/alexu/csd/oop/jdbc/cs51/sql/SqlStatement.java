package eg.edu.alexu.csd.oop.jdbc.cs51.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.Queue;

import eg.edu.alexu.csd.oop.db.Database;
import eg.edu.alexu.csd.oop.jdbc.cs51.parsers.ChooserParser;
import eg.edu.alexu.csd.oop.jdbc.cs51.parsers.FunctionChooserParser;

public class SqlStatement implements Statement {
	private Connection connection;
	private Queue<String> Batch;
	private int queryTimeOut;
	private Database database;
	private ChooserParser functionChooserParser;

	public SqlStatement(Connection connection, Database database) {
		this.connection = connection;
		Batch = new LinkedList<String>();
		queryTimeOut = 1;
		this.database = database;
		functionChooserParser = new FunctionChooserParser();
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void addBatch(String sql) throws SQLException {
		sql.trim().toLowerCase();
		Batch.add(sql);
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void clearBatch() throws SQLException {
		Batch.clear();

	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void close() throws SQLException {
		// connection.close();
		Batch.clear();
		Batch = null;
		functionChooserParser = null;

	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(String sql) throws SQLException {
		sql.trim().toLowerCase();
		int parseReturn = functionChooserParser.getOutput(sql);

		if (parseReturn == 1) {
			return (boolean)database.executeStructureQuery(sql);
			
		} else if (parseReturn == 2) {
			database.executeUpdateQuery(sql);
			return true;
		} else if (parseReturn == 3) {
			ResultSet rs =database.executeQuery(sql);
			if(rs==null) {
				return false;
			}
			return true;
		} else {
			throw new SQLException();
		}

	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int[] executeBatch() throws SQLException {
		int[] returnValues = new int[Batch.size()];
		int i = 0;
		while (!Batch.isEmpty()) {
			String Query = Batch.poll();
			Query.trim().toLowerCase();
			int parseReturn = functionChooserParser.getOutput(Query);
			if (parseReturn == 0) {
				throw new SQLException();
			} else if (parseReturn == 1) {
				boolean queryExecuted = (boolean) execute(Query);
				if (queryExecuted) {
					returnValues[i] = 1;
				} else {
					returnValues[i] = 0;
				}

			} else if (parseReturn == 2) {
				returnValues[i] = executeUpdate(Query);

			} else if (parseReturn == 3) {
				executeQuery(Query);
				returnValues[i] = 0;

			}
			i++;
		}
		return returnValues;

	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		sql = sql.trim().toLowerCase();
		return database.executeQuery(sql);

	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		sql.trim().toLowerCase();
		return (int) database.executeUpdateQuery(sql);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public Connection getConnection() throws SQLException {
		return connection;

	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getFetchSize() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getMaxRows() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return queryTimeOut;

	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public int getUpdateCount() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isClosed() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();

	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		queryTimeOut = seconds;

	}

}
